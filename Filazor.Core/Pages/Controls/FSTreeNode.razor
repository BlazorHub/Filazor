@using Filazor.Core.Data

@inject FileSystemService FSService


@if (childDirectoryDic.Count > 0)
{
    <span class="@selected" style="display: block;" @onclick="SelectedNode" @ondblclick="ExpandNode">
        <span class="caret @caretDirection" @onclick="ExpandNode"></span>
        <small>@nodeText</small>
    </span>

    @if (isExpanded)
    {
        <ul class="nested @showChild">
            @foreach (var dirInfo in childDirectoryDic)
            {
                <li>
                    <FSTreeNode IsDrive=false 
                                TargetRootDirectoryInfo=@dirInfo.Value
                                OnClickCallback="@OnClickCallback" />
                </li>
            }
        </ul>
    }
}
else
{
    <span class="@selected" style="display: block;" @onclick="SelectedNode"><small>@nodeText</small></span>
}


@code {

    private string showChild;
    private string caretDirection;
    private string selected;
    private bool isExpanded;
    private string nodeText;

    private Dictionary<string, System.IO.DirectoryInfo> childDirectoryDic = new Dictionary<string, System.IO.DirectoryInfo>();

    [Parameter]
    public bool IsDrive { get; set; }

    [Parameter]
    public string DriveVolumeLabel { get; set; }

    [Parameter]
    public System.IO.DirectoryInfo TargetRootDirectoryInfo { get; set; }

    [Parameter]
    public EventCallback<FSTreeNode> OnClickCallback { get; set; }


    protected override async Task OnInitializedAsync()
    {
        if (IsDrive) nodeText = $"{DriveVolumeLabel} ({TargetRootDirectoryInfo.Name})";
        else nodeText = TargetRootDirectoryInfo.Name;

        await GetChildDirectoryList();
    }


    private async Task GetChildDirectoryList()
    {
        try
        {
            var dirInfos = await FSService.GetDirectoryInfos(TargetRootDirectoryInfo.FullName);
            foreach (var dirInfo in dirInfos)
            {
                childDirectoryDic.Add(dirInfo.Name, dirInfo);
            }
        }
        catch (UnauthorizedAccessException)
        {

        }
    }

    private async void SelectedNode()
    {
        selected = "item-selected";
        
        await OnClickCallback.InvokeAsync(this);
    }

    private void ExpandNode()
    {
        caretDirection = string.IsNullOrEmpty(caretDirection) ? "caret-down" : "";
        showChild = string.IsNullOrEmpty(showChild) ? "active" : "";
        selected = "item-selected";

        isExpanded = !isExpanded;
    }
}